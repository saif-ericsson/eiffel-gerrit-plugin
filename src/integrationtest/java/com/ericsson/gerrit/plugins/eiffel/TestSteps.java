package com.ericsson.gerrit.plugins.eiffel;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeoutException;

import org.apache.http.HttpStatus;
import org.hamcrest.Matchers;
import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ericsson.gerrit.plugins.eiffel.utils.IntegrationTestBase;
import com.ericsson.gerrit.plugins.eiffel.utils.JsonPrefixFilter;

import cucumber.api.java.After;
import cucumber.api.java.Before;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;

public class TestSteps extends IntegrationTestBase {
    private static final Logger LOGGER = LoggerFactory.getLogger(TestSteps.class);
    private static final String TEST_MSG_KEYWORD = "Test SCMChangedEvent generated by Gerrit";

    private List<String> eventsFromRabbitMQ = new ArrayList<>();

    public TestSteps() throws Exception {
        cleanUp();
        loadProperties();
    }

    @Before()
    public void pluginLoadedEnabled() throws Exception {
        projectName = UUID.randomUUID().toString();
        changeStr = "  {\n" + "    \"project\" : " + projectName + ",\n"
                + "    \"subject\" : \"Let's support 100% Gerrit workflow direct in browser\",\n"
                + "    \"branch\" : \"master\",\n" + "    \"topic\" : \"create-change-in-browser\",\n"
                + "    \"status\" : \"DRAFT\"\n" + "  }";

        connectRMQ();
        initFirefoxDriver();
        loginToGerrit();

        // Check plugin globally for load and enable
        RestAssured.given()
                   .filter(new JsonPrefixFilter())
                   .urlEncodingEnabled(false)
                   .baseUri(TestConfig.GERRIT_BASE_URL)
                   .port(Integer.valueOf(TestConfig.GERRIT_PORT))
                   .auth()
                   .basic(TestConfig.ADMIN_USERNAME, adminPassword)
                   .get("/a/plugins/eiffel/gerrit~status")
                   .then()
                   .log()
                   .ifError()
                   .assertThat()
                   .statusCode(HttpStatus.SC_OK)
                   .contentType(ContentType.JSON)
                   .body("disabled", Matchers.nullValue());
    }

    @After
    public void cleanUp() throws Exception {
        deleteProjects(childProjectNames);
        deleteProjects(parentProjectNames);

        consumeMessages(100, 2000);

        if (driver != null) {
            driver.close();
        }
    }

    @Given("^I create a project X")
    public void i_create_a_project_X() throws Exception {
        String parent = null;
        createProject(projectName, parent);
    }

    @Given("^I create a project named \"([^\"]*)\"$")
    public void i_create_a_project_named(String projectName) throws Exception {
        String parent = null;
        createProject(projectName, parent);
    }

    @Given("^I create a child project of \"([^\"]*)\" named \"([^\"]*)\"$")
    public void i_create_a_child_project_of_named(String parent, String projectName) throws Exception {
        createProject(projectName, parent);
    }

    @Given("^I left branch filter option empty$")
    public void iLeftBranchFilterOptionEmpty() throws Throwable {
        RestAssured.given()
                   .filter(new JsonPrefixFilter())
                   .urlEncodingEnabled(false)
                   .auth()
                   .basic(TestConfig.ADMIN_USERNAME, adminPassword)
                   .baseUri(TestConfig.GERRIT_BASE_URL)
                   .port(Integer.valueOf(TestConfig.GERRIT_PORT))
                   .get("/a/projects/" + projectName + "/config")
                   .then()
                   .log()
                   .ifError()
                   .assertThat()
                   .statusCode(HttpStatus.SC_OK)
                   .contentType(ContentType.JSON)
                   .body("plugin_config.eiffel.filter.value", Matchers.equalTo(""));
    }

    @Given("^I did not enter any work item filters$")
    public void iDidNotEnterAnyWorkItemFilters() throws Throwable {
        RestAssured.given()
                   .filter(new JsonPrefixFilter())
                   .urlEncodingEnabled(false)
                   .auth()
                   .basic(TestConfig.ADMIN_USERNAME, adminPassword)
                   .baseUri(TestConfig.GERRIT_BASE_URL)
                   .port(Integer.valueOf(TestConfig.GERRIT_PORT))
                   .get("/a/projects/" + projectName + "/config")
                   .then()
                   .log()
                   .ifError()
                   .assertThat()
                   .statusCode(HttpStatus.SC_OK)
                   .contentType(ContentType.JSON)
                   .body("plugin_config.eiffel.patterns.value", Matchers.equalTo(""));
    }

    @Given("^I set a branch filter that matches branch B$")
    public void iSetABranchFilterThatMatchesBranchB() throws Throwable {
        // Configure Plugin Branch
        //

        driver.get(TestConfig.GERRIT_BASE_URL + "/#/admin/projects/" + projectName);
        selector = "#gerrit_body > div > div > div > div > div:nth-child(5) > table:nth-child(1) > tbody > tr:nth-child(3) > td:nth-child(2) > input";
        WebElement filterBranch = new WebDriverWait(driver, TestConfig.TIME_OUT).until(
                ExpectedConditions.elementToBeClickable(By.cssSelector(selector)));
        filterBranch.clear();
        filterBranch.sendKeys(BRANCH_NAME);

        selector = "#gerrit_body > div > div > div > div > button";
        WebElement rmqSave = new WebDriverWait(driver, TestConfig.TIME_OUT).until(
                ExpectedConditions.elementToBeClickable(By.cssSelector(selector)));
        rmqSave.click();
    }

    @Given("^Eiffel plugin is installed, loaded and enabled for project X in Gerrit$")
    public void Eiffel_plugin_is_installed_loaded_and_enabled_for_project_X_in_Gerrit() throws Throwable {
        // TODO
        // those conditions are satisfied already in before()
        // we can consider to move it here later
    }

    @Given("^I configured RabbitMQ settings for project X$")
    public void I_configured_RabbitMQ_settings_for_project_X() throws Throwable {
        // TODO
        // those conditions are satisfied already in before()
        // we can consider to move it here later
    }

    @Given("^I set a branch filter that does NOT match branch B$")
    public void I_set_a_branch_filter_that_does_NOT_match_branch_B() throws Throwable {
        // Configure Plugin Branch
        //

        driver.get(TestConfig.GERRIT_BASE_URL + "/#/admin/projects/" + projectName);
        selector = "#gerrit_body > div > div > div > div > div:nth-child(5) > table:nth-child(1) > tbody > tr:nth-child(3) > td:nth-child(2) > input";
        WebElement filterBranch = new WebDriverWait(driver, TestConfig.TIME_OUT).until(
                ExpectedConditions.elementToBeClickable(By.cssSelector(selector)));
        filterBranch.clear();
        filterBranch.sendKeys(NON_MATCHING_BRANCH_NAME);

        selector = "#gerrit_body > div > div > div > div > button";
        WebElement rmqSave = new WebDriverWait(driver, TestConfig.TIME_OUT).until(
                ExpectedConditions.elementToBeClickable(By.cssSelector(selector)));
        rmqSave.click();
    }

    @Given("^I entered a work item filter that matches references of type \"([^\"]*)\"$")
    public void I_entered_a_work_item_filter_that_matches_references_of_type(String arg1) throws Throwable {
        String partternStr = "{ \"type\": \"" + arg1
                + "\", \"pattern\": \"[A-Za-z0-9]+\\\\s*\\\\:\\\\s*[A-Z][A-Z_0-9]+-[0-9]+:?\\\\s*[a-zA-Z_0-9]*\", \"baseURL\": \"http://jira-oss.lmera.ericsson.se/browse/\" }";
        // Configure Plugin Branch
        //

        driver.get(TestConfig.GERRIT_BASE_URL + "/#/admin/projects/" + projectName);
        selector = "#gerrit_body > div > div > div > div > div:nth-child(5) > table:nth-child(1) > tbody > tr:nth-child(4) > td:nth-child(2) > input";
        WebElement parsingPattern = new WebDriverWait(driver, TestConfig.TIME_OUT).until(
                ExpectedConditions.elementToBeClickable(By.cssSelector(selector)));
        parsingPattern.clear();
        parsingPattern.sendKeys(partternStr);

        selector = "#gerrit_body > div > div > div > div > button";
        WebElement rmqSave = new WebDriverWait(driver, TestConfig.TIME_OUT).until(
                ExpectedConditions.elementToBeClickable(By.cssSelector(selector)));
        rmqSave.click();
    }

    @Given("^I have disabled plugin for project X$")
    public void I_have_disabled_plugin_for_project_X() throws Throwable {
        // Configure Eiffel related info on Plugin

        driver.navigate().refresh();
        selector = ".gwt-CheckBox > input";
        WebElement inputElement = new WebDriverWait(driver, TestConfig.TIME_OUT).until(
                ExpectedConditions.elementToBeClickable(By.cssSelector(selector)));
        inputElement.click();

        selector = "#gerrit_body > div > div > div > div > button";
        WebElement rmqSave = new WebDriverWait(driver, TestConfig.TIME_OUT).until(
                ExpectedConditions.elementToBeClickable(By.cssSelector(selector)));
        rmqSave.click();
    }

    @Given("^I create a branch named \"([^\"]*)\" in project \"([^\"]*)\"$")
    public void i_create_a_branch_named_in_project(String branchName, String projectName) throws Exception {
        String urlEncodedProjectName = URLEncoder.encode(projectName, "UTF-8");

        Response response = RestAssured.given()
                                       .body(new JSONObject())
                                       .contentType("application/json; charset=UTF-8")
                                       .filter(new JsonPrefixFilter())
                                       .urlEncodingEnabled(false)
                                       .auth()
                                       .basic(TestConfig.ADMIN_USERNAME, adminPassword)
                                       .baseUri(TestConfig.GERRIT_BASE_URL)
                                       .port(Integer.valueOf(TestConfig.GERRIT_PORT))
                                       .put("/a/projects/" + urlEncodedProjectName + "/branches/" + branchName)
                                       .andReturn();

        if (response.statusCode() == 409) {
            LOGGER.debug(response.asString());
        } else {
            assertEquals(201, response.statusCode());
        }
    }

    @Given("^I set submit type to \"([^\"]*)\" for project \"([^\"]*)\"$")
    public void i_set_submit_type_to(String type, String projectName) {
        setSubmitType(type, projectName);
    }

    @When("^I click \"([^\"]*)\" button in Gerrit's page of project X$")
    public void I_click_button_in_Gerrit_s_page_of_project_X(String arg1) throws Throwable {
        driver.get(TestConfig.GERRIT_BASE_URL + "/#/admin/projects/" + projectName);
        selector = "button[title='" + arg1 + "']";
        WebElement sendTestMsgButton = new WebDriverWait(driver, TestConfig.TIME_OUT).until(
                ExpectedConditions.elementToBeClickable(By.cssSelector(selector)));
        sendTestMsgButton.click();

        // need to click "OK" on the popup alert
        // otherwise exception sometimes shows up when the driver is closed.
        Thread.sleep(2000);
        Alert alert = driver.switchTo().alert();
        alert.accept();
    }

    @When("^I submit an approved change in project X$")
    public void iSubmitAnApprovedChangeInBranchBOfProjectX() throws Throwable {
        submitChange(projectName, "master", changeStr);
    }

    @When("^I submit an approved change in branch B of project X$")
    public void i_submit_an_approved_change_in_branch_B_of_project_X() throws Exception {
        submitChange(projectName, "master", changeStr);
    }

    @When("^I submit an approved change in project X with the commit message containing a \"([^\"]*)\" reference \"([^\"]*)\"$")
    public void I_submit_an_approved_change_in_project_X_with_the_commit_message_containing_a_reference(String arg1,
            String arg2) throws Throwable {
        LOGGER.info("Commit message {} reference: {}", arg1, arg2);
        submitChange(projectName, "master", getChangeString(projectName, "master", arg2));
    }

    @When("^I submit an approved change on branch \"([^\"]*)\" in project \"([^\"]*)\"$")
    public void i_submit_an_approved_change_in_project(String branch, String projectName) throws Exception {
        String changeString = getChangeString(projectName, branch, "message");
        submitChange(projectName, branch, changeString);
    }

    @Then("^plugin should send Eiffel messages$")
    public void pluginShouldSendEiffelMessages() throws Throwable {
        // Give time for gerrit to send rabbitmq msg
        List<String> messages = consumeMessages(1, 10000);
        assertEquals(1, messages.size());
        assertTrue(messages.get(0).contains("EiffelSCMChangedEvent"));
        assertTrue(messages.get(0).contains(changeID));
        assertTrue(messages.get(0).contains(projectName));
    }

    @Then("^plugin should send an Eiffel SCC message containing the commit id, project name, branch name B and repoURL$")
    public void pluginShouldSendAnEiffelSCEMessageContainingTheCommitIdProjectNameBranchNameBAndRepoURL()
            throws Throwable {
        // Give time for gerrit to send rabbitmq msg
        List<String> messages = consumeMessages(1, 10000);
        assertEquals(1, messages.size());
        assertTrue(messages.get(0).contains(changeID));
        assertTrue(messages.get(0).contains(projectName));
    }

    @Then("^the RabbitMQ server contains \"([^\"]*)\" Eiffel SCE messages")
    public void plugin_should_send_Eiffel_SCE_messages_to_the_RabbitMQ_server_where_message_links_to_message(
            int amountOfMessages) throws IOException, TimeoutException {
        eventsFromRabbitMQ = consumeMessages(amountOfMessages, 10000);
        assertEquals(amountOfMessages, eventsFromRabbitMQ.size());

        // RabbitMQ should not contain more than the "amountOfMessages"
        List<String> extraEvents = consumeMessages(1, 2000);
        assertEquals(0, extraEvents.size());
    }

    @Then("^message \"([^\"]*)\" links to message \"([^\"]*)\"$")
    public void message_links_to_message(int latestMessageIndex, int previousMessageIndex) {
        JSONObject previousMessage = new JSONObject(eventsFromRabbitMQ.get(previousMessageIndex - 1));
        JSONObject previousMessageEvent = previousMessage.getJSONObject("eiffelMessageVersions")
                                                         .getJSONObject(TestConfig.EIFFEL_MESSAGE_VERSION);
        String previousMessageEventId = previousMessageEvent.getString("eventId");

        // Check that previousEvent points on the message that it's suppose to point to.
        JSONObject latestMessage = new JSONObject(eventsFromRabbitMQ.get(latestMessageIndex - 1));
        JSONObject latestMessageEvent = latestMessage.getJSONObject("eiffelMessageVersions")
                                                     .getJSONObject(TestConfig.EIFFEL_MESSAGE_VERSION);
        JSONObject eventData = latestMessageEvent.getJSONObject("eventData");
        JSONArray latestMessagePreviousEvents = eventData.getJSONArray("previousEvents");
        String latestMessagePreviousEventId = latestMessagePreviousEvents.get(0).toString();
        assertEquals(previousMessageEventId, latestMessagePreviousEventId);
    }

    @Then("^message \"([^\"]*)\" has no links to previous event$")
    public void message_has_no_links_to_previous_event(int messageIndex) {
        JSONObject message = new JSONObject(eventsFromRabbitMQ.get(messageIndex - 1));
        LOGGER.debug(message.toString());
    }

    @Then("^plugin should send a test message to the RabbitMQ server I configured$")
    public void plugin_should_send_a_test_message_to_the_RabbitMQ_server_I_configured() throws Throwable {
        List<String> messages = consumeMessages(1, 10000);
        assertEquals(1, messages.size());
        assertTrue(messages.get(0).contains(TEST_MSG_KEYWORD));
    }

    @Then("^plugin should NOT send any Eiffel message$")
    public void plugin_should_NOT_send_any_Eiffel_message() throws Throwable {
        List<String> messages = consumeMessages(0, 10000);
        assertEquals(0, messages.size());
    }

    @Then("^the message number \"([^\"]*)\" should contain correct event source and merge commitID\\.$")
    public void the_message_number_should_contain_event_source_and_not_contain_the_previous_change_changeID(int messageToTestNumber) throws IOException, TimeoutException {
        // Write code here that turns the phrase above into concrete actions
        List<String> messages = consumeMessages(1, 10000);
        assertEquals(1, messages.size());

        JSONObject messageToTest = new JSONObject(messages.get(messageToTestNumber - 1)).getJSONObject("eiffelMessageVersions").getJSONObject("3.21.55.0.1");

        String urlInEventSource = messageToTest.getJSONObject("eventSource").getString("url");
        String[] urlParts = urlInEventSource.split("\\/");
        String actualLegacyID = urlParts[urlParts.length-1];
        String expectedLegacyID = gerritCommitResponses.get(messageToTestNumber - 1).getLegacyID();
        assertEquals(expectedLegacyID, actualLegacyID);

        String actualMergeCommitID = messageToTest.getJSONObject("eventData").getJSONObject("identifier").getString("sha1");
        String expectedMergeCommitID = getFirstMergeCommitID();
        assertEquals(expectedMergeCommitID, actualMergeCommitID);
    }

    @Then("^plugin should send an Eiffel SCE message to the RabbitMQ server I configured$")
    public void plugin_should_send_an_Eiffel_SCE_message_to_the_RabbitMQ_server_I_configured() throws Throwable {
    }

    @Then("^the message should contain a \"([^\"]*)\" work item named \"([^\"]*)\" with state \"([^\"]*)\"$")
    public void the_message_should_contain_a_work_item_named_with_state(String type, String name, String state)
            throws Throwable {
        // according to plugin doc
        // :8080/plugins/eiffel/Documentation/index.html
        // supported list of states: COMPLETE, PARTIAL, REMOVED, INCONSISTENT
        // " If provided state doesn’t much any of listed above then it will be set to
        // COMPLETE"
        LOGGER.info("{} work item, Name: {}, State: {}", type, name, state);
        List<String> messages = consumeMessages(1, 10000);
        assertEquals(1, messages.size());
        String msg = messages.get(0);

        // TODO can be improved in many ways to verification
        assertTrue(msg.contains("\"type\":\"" + type));
        assertTrue(msg.contains("\"name\":\"" + name));
        assertTrue(msg.contains("\"state\":\"" + state));
    }

    private void loadProperties() {
        String gerritIP = System.getProperty("gerrit.url");
        if (gerritIP != null && !gerritIP.isEmpty()) {
            TestConfig.GERRIT_BASE_URL = String.format("http://%s:%s", gerritIP, TestConfig.GERRIT_PORT);
        }

        String rabbitmqURL = System.getProperty("rabbitmq.url");
        if (rabbitmqURL != null && !rabbitmqURL.isEmpty()) {
            TestConfig.RABBITMQ_URL = rabbitmqURL;
        }

        String firefoxBinaryFolder = System.getProperty("FIREFOX_BINARY_FOLDER");
        if (firefoxBinaryFolder != null && !firefoxBinaryFolder.isEmpty()) {
            TestConfig.FIREFOX_BINARY_PATH = Paths.get(firefoxBinaryFolder, "firefox", "firefox").toString();
        }
    }

}
